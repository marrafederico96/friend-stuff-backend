// <auto-generated />
using System;
using FriendStuffBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FriendStuffBackend.Data.Migrations
{
    [DbContext(typeof(FriendStuffDbContext))]
    [Migration("20250811090826_RemoveChatTable")]
    partial class RemoveChatTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("event_name");

                    b.Property<string>("NormalizedEventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("normalized_event_name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EventName", "AdminId")
                        .IsUnique();

                    b.ToTable("events");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.EventUser", b =>
                {
                    b.Property<Guid>("EventUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer")
                        .HasColumnName("user_role");

                    b.HasKey("EventUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("event_user");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expense_date");

                    b.Property<string>("ExpenseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("expense_name");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("payer_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PayerId");

                    b.ToTable("expenses", t =>
                        {
                            t.HasCheckConstraint("Expense_Amount_Positive", "amount > 0");
                        });
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.ExpenseParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountOwed")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_owed");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_id");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("expense_participants");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.ExpenseRefund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountRefund")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_refund");

                    b.Property<Guid>("DebtorId")
                        .HasColumnType("uuid")
                        .HasColumnName("debtor_id");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("payer_id");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refund_date");

                    b.HasKey("Id");

                    b.HasIndex("DebtorId");

                    b.HasIndex("PayerId");

                    b.ToTable("expense_refund", t =>
                        {
                            t.HasCheckConstraint("Expense_Refund_Amount_Positive", "amount_refund > 0");
                        });
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("send_date");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_at");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid");

                    b.Property<Guid>("TokenValue")
                        .HasColumnType("uuid")
                        .HasColumnName("token_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Event", b =>
                {
                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.EventUser", b =>
                {
                    b.HasOne("FriendStuffBackend.Domain.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "Participant")
                        .WithMany("Events")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Expense", b =>
                {
                    b.HasOne("FriendStuffBackend.Domain.Entities.Event", "Event")
                        .WithMany("Expenses")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "Payer")
                        .WithMany("ExpensesPayed")
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.ExpenseParticipant", b =>
                {
                    b.HasOne("FriendStuffBackend.Domain.Entities.Expense", "Expense")
                        .WithMany("Participants")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "Participant")
                        .WithMany("ExpenseParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.ExpenseRefund", b =>
                {
                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "Debtor")
                        .WithMany("ExpenseAsDebtor")
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "Payer")
                        .WithMany("ExpenseAsPayer")
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Debtor");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Message", b =>
                {
                    b.HasOne("FriendStuffBackend.Domain.Entities.Event", "Event")
                        .WithMany("Messages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("FriendStuffBackend.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Event", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.Expense", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("FriendStuffBackend.Domain.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("ExpenseAsDebtor");

                    b.Navigation("ExpenseAsPayer");

                    b.Navigation("ExpenseParticipants");

                    b.Navigation("ExpensesPayed");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
